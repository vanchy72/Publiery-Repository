ðŸŽ¯ MIGRACIÃ“N FINAL: ÃšLTIMAS TABLAS RESTANTES
============================================

ðŸ“Š PROGRESO ACTUAL:
- Migradas: ~18 tablas
- Restantes: ~17 tablas
- Progreso: ~51% completado

ðŸš€ COMANDO FINAL PARA COMPLETAR 100%:

-- ===============================================
-- ÃšLTIMAS 17 TABLAS PARA MIGRACIÃ“N COMPLETA
-- ===============================================

CREATE TABLE IF NOT EXISTS recuperacion_contrasena (
    id INTEGER NOT NULL PRIMARY KEY,
    usuario_id INTEGER,
    token VARCHAR(255),
    usado BOOLEAN DEFAULT false,
    fecha_solicitud TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_expiracion TIMESTAMP
);

CREATE TABLE IF NOT EXISTS correcciones_libros (
    id INTEGER NOT NULL PRIMARY KEY,
    libro_id INTEGER,
    corrector_id INTEGER,
    tipo_correccion VARCHAR(100),
    observaciones TEXT,
    estado VARCHAR(50),
    fecha_correccion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS revisiones_libros (
    id INTEGER NOT NULL PRIMARY KEY,
    libro_id INTEGER,
    revisor_id INTEGER,
    calificacion INTEGER,
    comentarios TEXT,
    estado VARCHAR(50),
    fecha_revision TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS descargas (
    id INTEGER NOT NULL PRIMARY KEY,
    usuario_id INTEGER,
    libro_id INTEGER,
    fecha_descarga TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(45),
    formato VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS campana_compartidas (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    usuario_compartido_id INTEGER,
    fecha_compartida TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    permisos VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS campanas_compartidas_admin (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    admin_id INTEGER,
    usuario_objetivo_id INTEGER,
    fecha_compartida TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activa BOOLEAN DEFAULT true
);

CREATE TABLE IF NOT EXISTS campana_distribucion (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    canal VARCHAR(100),
    parametros TEXT,
    estado VARCHAR(50),
    fecha_programada TIMESTAMP,
    fecha_ejecutada TIMESTAMP
);

CREATE TABLE IF NOT EXISTS campana_envios (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    usuario_id INTEGER,
    email VARCHAR(255),
    estado VARCHAR(50),
    fecha_envio TIMESTAMP,
    fecha_apertura TIMESTAMP,
    fecha_click TIMESTAMP
);

CREATE TABLE IF NOT EXISTS campana_tracking (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    usuario_id INTEGER,
    accion VARCHAR(100),
    valor VARCHAR(255),
    fecha_accion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS campanas_libros (
    id INTEGER NOT NULL PRIMARY KEY,
    campana_id INTEGER,
    libro_id INTEGER,
    precio_especial DECIMAL(10,2),
    descuento DECIMAL(5,2),
    fecha_inicio TIMESTAMP,
    fecha_fin TIMESTAMP
);

CREATE TABLE IF NOT EXISTS system_logs (
    id INTEGER NOT NULL PRIMARY KEY,
    nivel VARCHAR(50),
    mensaje TEXT,
    contexto TEXT,
    usuario_id INTEGER,
    ip_address VARCHAR(45),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS email_logs (
    id INTEGER NOT NULL PRIMARY KEY,
    destinatario VARCHAR(255),
    asunto VARCHAR(255),
    mensaje TEXT,
    estado VARCHAR(50),
    fecha_envio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    respuesta_servidor TEXT
);

CREATE TABLE IF NOT EXISTS log_actividad (
    id INTEGER NOT NULL PRIMARY KEY,
    usuario_id INTEGER,
    accion VARCHAR(255),
    tabla_afectada VARCHAR(100),
    registro_id INTEGER,
    datos_anteriores TEXT,
    datos_nuevos TEXT,
    ip_address VARCHAR(45),
    fecha_accion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS notificaciones_escritores (
    id INTEGER NOT NULL PRIMARY KEY,
    escritor_id INTEGER,
    tipo VARCHAR(100),
    titulo VARCHAR(255),
    mensaje TEXT,
    leida BOOLEAN DEFAULT false,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS usuario_configuracion_notificaciones (
    id INTEGER NOT NULL PRIMARY KEY,
    usuario_id INTEGER,
    tipo_notificacion VARCHAR(100),
    activa BOOLEAN DEFAULT true,
    medio VARCHAR(50),
    configuracion TEXT
);

CREATE TABLE IF NOT EXISTS pagos_comisiones (
    id INTEGER NOT NULL PRIMARY KEY,
    comision_id INTEGER,
    monto DECIMAL(12,2),
    metodo_pago VARCHAR(50),
    referencia_pago VARCHAR(255),
    estado VARCHAR(50) DEFAULT 'pendiente',
    fecha_pago TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS royalties (
    id INTEGER NOT NULL PRIMARY KEY,
    escritor_id INTEGER,
    libro_id INTEGER,
    venta_id INTEGER,
    porcentaje DECIMAL(5,2),
    monto DECIMAL(12,2),
    fecha_generacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR(50) DEFAULT 'pendiente'
);

-- ===============================================
-- VERIFICACIÃ“N FINAL - TODAS LAS TABLAS
-- ===============================================

SELECT 'recuperacion_contrasena' as tabla, COUNT(*) as registros FROM recuperacion_contrasena
UNION ALL SELECT 'correcciones_libros', COUNT(*) FROM correcciones_libros
UNION ALL SELECT 'revisiones_libros', COUNT(*) FROM revisiones_libros
UNION ALL SELECT 'descargas', COUNT(*) FROM descargas
UNION ALL SELECT 'campana_compartidas', COUNT(*) FROM campana_compartidas
UNION ALL SELECT 'campanas_compartidas_admin', COUNT(*) FROM campanas_compartidas_admin
UNION ALL SELECT 'campana_distribucion', COUNT(*) FROM campana_distribucion
UNION ALL SELECT 'campana_envios', COUNT(*) FROM campana_envios
UNION ALL SELECT 'campana_tracking', COUNT(*) FROM campana_tracking
UNION ALL SELECT 'campanas_libros', COUNT(*) FROM campanas_libros
UNION ALL SELECT 'system_logs', COUNT(*) FROM system_logs
UNION ALL SELECT 'email_logs', COUNT(*) FROM email_logs
UNION ALL SELECT 'log_actividad', COUNT(*) FROM log_actividad
UNION ALL SELECT 'notificaciones_escritores', COUNT(*) FROM notificaciones_escritores
UNION ALL SELECT 'usuario_configuracion_notificaciones', COUNT(*) FROM usuario_configuracion_notificaciones
UNION ALL SELECT 'pagos_comisiones', COUNT(*) FROM pagos_comisiones
UNION ALL SELECT 'royalties', COUNT(*) FROM royalties;

ðŸŽ¯ DESPUÃ‰S DE EJECUTAR ESTE SQL:
Â¡MIGRACIÃ“N 100% COMPLETA! ðŸŽ‰
- Todas las 35 tablas migradas
- Sistema Publiery completo en Supabase
- Listo para configurar aplicaciÃ³n