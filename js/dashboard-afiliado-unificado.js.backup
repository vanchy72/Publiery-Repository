/**
 * Dashboard Afiliado - JavaScript Unificado
 * Combina funcionalidad original + nuevas caracter√≠sticas mejoradas
 * Versi√≥n: 2.0 - Unificada
 */

console.log('üìÅ dashboard-afiliado-unificado.js cargado');

// ========================================
// VARIABLES GLOBALES
// ========================================

let userData = null;
let dashboardData = null;
let analyticsData = null;
let notificacionesData = null;
let campanasData = null;
let charts = {};
let comisionesDetalladas = []; // Variable para almacenar comisiones detalladas
let librosDisponibles = []; // Variable para almacenar los libros de la tienda

// ========================================
// DATOS SIMULADOS PARA FALLBACK
// ========================================

const simulatedUserData = {
    id: 999,
    nombre: "Afiliado de Prueba",
    email: "test@afiliado.com",
    rol: "afiliado",
    estado: "activo",
    codigo_afiliado: "TESTCODE123",
    enlace_afiliado: "http://localhost/publiery/registro.html?ref=TESTCODE123",
    qr_code: "https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=http%3A%2F%2Flocalhost%2Fpubliery%2Fregistro.html%3Fref%3DTESTCODE123",
    nivel: 1
};

const simulatedCampanas = [
    {
        id: 101,
        nombre: "Campa√±a de Verano (Simulada)",
        descripcion: "Promoci√≥n especial del libro 'Aventuras en la Nube'. Ideal para captar nuevos lectores durante las vacaciones.",
        estado: "activa",
        objetivo_ventas: 100,
        ventas_generadas: 45,
        volumen_generado: 900000,
        comisiones_generadas: 180000,
        enlace_personalizado: "verano_aventura",
        libro_id: 1, // Asocia esta campa√±a a un libro espec√≠fico
        fecha_creacion: "2023-06-01 10:00:00"
    },
    {
        id: 102,
        nombre: "Reclutamiento General (Simulada)",
        descripcion: "Campa√±a gen√©rica para atraer nuevos afiliados a tu red. No est√° vinculada a ning√∫n libro.",
        estado: "activa",
        objetivo_ventas: 0, // Sin objetivo de ventas
        ventas_generadas: 5, // Representa ventas de activaci√≥n
        volumen_generado: 125000,
        comisiones_generadas: 25000,
        enlace_personalizado: "unete_a_mi_red",
        libro_id: null, // Enlace de registro general
        fecha_creacion: "2023-05-20 15:30:00"
    }
];

// ========================================
// INICIALIZACI√ìN PRINCIPAL
// ========================================

document.addEventListener('DOMContentLoaded', async function() {
    // Log visual de diagn√≥stico
    console.log('üöÄ Dashboard Afiliado iniciando...');
    
    // Verificar autenticaci√≥n
    if (!checkAuthentication()) {
        window.location.href = 'login.html';
        return;
    }

    // Cargar datos iniciales (esto ya incluye loadDashboardData)
    const dataLoaded = await loadUserData();
    if (!dataLoaded) {
        // Si no se cargaron los datos (porque se est√° redirigiendo),
        // detener la ejecuci√≥n para evitar errores.
        return;
    }
    
    // FORZAR CARGA DE DATOS DEL DASHBOARD SI NO EST√ÅN DISPONIBLES
    if (!dashboardData) {
        console.log('üîÑ Forzando carga autom√°tica de datos del dashboard...');
        await loadDashboardDataDirectly();
    }

    // Verificar estado de activaci√≥n
    checkActivationStatus();
    
    // Configurar pesta√±as
    setupTabs();
    
    // Configurar eventos
    setupEventListeners();
    
    // Cargar pesta√±a inicial
    loadInitialTab();
    
    // Iniciar actualizaciones autom√°ticas
    startAutoRefresh();
    
    console.log('‚úÖ Dashboard inicializado correctamente');
});

// ========================================
// FUNCIONES DE AUTENTICACI√ìN Y DATOS
// ========================================

function checkAuthentication() {
    console.log('üîê Verificando autenticaci√≥n...');
    
    const userDataStr = localStorage.getItem('user_data');
    
    console.log('üë§ User data encontrado:', userDataStr ? 'S√≠' : 'No');
    
    if (!userDataStr) {
        console.log('‚ùå Faltan user_data');
        return false;
    }
    
    try {
        const user = JSON.parse(userDataStr);
        console.log('üë§ Usuario parseado:', user);
        
        if (user.rol !== 'afiliado' && user.rol !== 'admin' && user.rol !== 'lector') {
            console.log('‚ùå Rol no v√°lido:', user.rol);
            return false;
        }
        
        // Verificar si hay una sesi√≥n anterior diferente
        const currentSessionUser = sessionStorage.getItem('current_user_id');
        if (currentSessionUser && currentSessionUser !== user.id.toString()) {
            console.log('‚ö†Ô∏è Usuario diferente detectado, limpiando sesi√≥n anterior...');
            // Limpiar sesi√≥n anterior
            // localStorage.removeItem('session_token');
            // localStorage.removeItem('user_data');
            // sessionStorage.removeItem('current_user_id');
            return false;
        }
        
        // Guardar el ID del usuario actual en sessionStorage
        sessionStorage.setItem('current_user_id', user.id.toString());
        
        console.log('‚úÖ Autenticaci√≥n v√°lida');
        return true;
    } catch (error) {
        console.error('‚ùå Error parseando user_data:', error);
        // localStorage.removeItem('session_token');
        // localStorage.removeItem('user_data');
        // sessionStorage.removeItem('current_user_id');
        return false;
    }
}

// NUEVA FUNCI√ìN: Cargar datos del dashboard autom√°ticamente
async function loadDashboardDataDirectly() {
    console.log('üìä Cargando datos del dashboard autom√°ticamente...');
    
    try {
        const response = await fetch('api/afiliados/dashboard.php', {
            method: 'GET',
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            dashboardData = data;
            console.log('‚úÖ Datos del dashboard cargados autom√°ticamente');
            
            // Actualizar interfaz autom√°ticamente
            updateDashboardStats();
            updateUserInfoComplete();
            
            return true;
        } else {
            console.error('‚ùå Error en API dashboard:', data.error);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error cargando dashboard:', error);
        return false;
    }
}

// NUEVA FUNCI√ìN: Actualizar informaci√≥n completa del usuario
function updateUserInfoComplete() {
    console.log('üîÑ Actualizando informaci√≥n completa del usuario...');
    
    if (!dashboardData || !dashboardData.afiliado) {
        console.log('‚ùå No hay datos del dashboard disponibles');
        return;
    }
    
    const afiliado = dashboardData.afiliado;
    
    // Funci√≥n helper para actualizar elementos
    function updateElementSafe(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || 'N/A';
            return true;
        }
        return false;
    }
    
    // Actualizar todos los campos autom√°ticamente
    updateElementSafe('afiliadoId', afiliado.codigo_afiliado);
    updateElementSafe('afiliadoNombre', afiliado.nombre);
    updateElementSafe('emailAfiliado', afiliado.email);
    updateElementSafe('nivelAfiliado', `Nivel ${afiliado.nivel}`);
    updateElementSafe('estadoActivacion', afiliado.estado);
    updateElementSafe('fechaRegistro', afiliado.fecha_registro ? new Date(afiliado.fecha_registro).toLocaleDateString() : 'N/A');
    updateElementSafe('nombrePatrocinador', afiliado.nombre_patrocinador);
    
    // Actualizar enlace de afiliado
    const enlaceElement = document.getElementById('enlaceAfiliado');
    if (enlaceElement) {
        enlaceElement.value = afiliado.enlace_afiliado;
    }
    
    // Actualizar QR code
    const qrElement = document.getElementById('codigoQR');
    if (qrElement && afiliado.qr_code) {
        qrElement.src = afiliado.qr_code;
    }
    
    // Actualizar saludo principal
    const saludoElement = document.querySelector('h1');
    if (saludoElement) {
        saludoElement.textContent = `Bienvenido, ${afiliado.nombre}`;
    }
    
    console.log('‚úÖ Informaci√≥n completa del usuario actualizada autom√°ticamente');
}

async function loadUserData() {
    console.log('üöÄ loadUserData() INICIADA');
    try {
        console.log('üîÑ Cargando datos del usuario...');
        
        // PRIMERO: USAR DATOS REALES DEL USUARIO LOGUEADO
        console.log('üîÑ Forzando uso de datos reales, no simulados...');
        
        // SEGUNDO: Si no hay datos simulados, cargar del backend
        console.log('üì° No hay datos simulados, cargando del backend...');
        
        // Obtener datos REALES del usuario logueado
        const userDataStr = localStorage.getItem('user_data');
        console.log('üìã user_data raw:', userDataStr);
        
        if (userDataStr) {
            try {
                userData = JSON.parse(userDataStr);
                console.log('üë§ ‚úÖ USUARIO REAL ENCONTRADO:', userData);
                
                // Usar estos datos reales directamente
                console.log('üéØ Usando datos del usuario real:', userData.nombre);
                
                // Actualizar interfaz con datos reales
                updateUserInfo();
                
                // No usar fallback de datos simulados
                return true;
                
            } catch (parseError) {
                console.error('‚ùå Error parseando user_data:', parseError);
                userData = null;
            }
        } else {
            console.log('‚ùå No hay user_data en localStorage - usuario no logueado');
        }
        
        // Verificar sesi√≥n primero
        console.log('üì° Verificando sesi√≥n...');
        const sessionResponse = await fetch('api/auth/verificar_sesion.php', {
            method: 'GET',
            credentials: 'include'
        });
        
        const sessionData = await sessionResponse.json();
        console.log('üìã Datos de sesi√≥n:', sessionData);
        
        if (!sessionData.authenticated) {
            console.error('‚ùå No hay sesi√≥n activa. Redirigiendo a login...');
            throw new Error('Sesi√≥n no autenticada');
        }
        
        console.log('‚úÖ Sesi√≥n verificada correctamente');
        
        console.log('üì° Haciendo petici√≥n a dashboard.php...');
        const response = await fetch('api/afiliados/dashboard.php', {
            method: 'GET',
            credentials: 'include'
        });
        
        console.log('üì° Respuesta del servidor:', response.status, response.statusText);
        
        const data = await response.json();
        console.log('üìä Datos del dashboard recibidos:', data);
        
        if (data.success) {
            // Actualizar datos del dashboard
            dashboardData = data;
            console.log('‚úÖ Datos del dashboard cargados correctamente');
            
            // Actualizar informaci√≥n del usuario si no est√° disponible
            if (!userData && data.afiliado) {
                userData = data.afiliado;
                console.log('‚úÖ userData actualizado desde dashboard');
            }
            
            // AHORA actualizar la informaci√≥n del usuario con todos los datos disponibles
            updateUserInfo();
            updateDashboardStats();
            console.log('‚úÖ Informaci√≥n del usuario y estad√≠sticas actualizadas');
            return true;
        } else {
            console.error('‚ùå Error en la respuesta del dashboard:', data);
            if (data.error === 'No autorizado') {
                // Redirigir al login si no est√° autorizado
                localStorage.removeItem('session_token');
                localStorage.removeItem('user_data');
                window.location.href = 'login.html';
            }
            // Si la API devuelve un error controlado, forzamos el fallback.
            throw new Error(data.error || 'La API del dashboard devolvi√≥ un error');
        }
    } catch (error) {
        // Si el error es de autenticaci√≥n, la √∫nica soluci√≥n es redirigir.
        if (error.message === 'Sesi√≥n no autenticada') {
            window.location.href = 'login.html';
            return false; // Detener la ejecuci√≥n para que la redirecci√≥n ocurra.
        }

        console.error('‚ùå Error cr√≠tico cargando datos del usuario:', error);
        showAppNotification('Error de conexi√≥n. Usando datos de prueba.', 'error');
        
        // --- SIN FALLBACK - REDIRIGIR AL LOGIN ---
        console.error('‚ùå No se pudieron cargar datos del usuario. Redirigiendo al login.');
        showAppNotification('Error de conexi√≥n. Redirigiendo al login...', 'error');
        
        setTimeout(() => {
            window.location.href = 'login.html';
        }, 3000);
        return false;
        updateUserInfo();
        updateDashboardStats();
        return true;
    }
    console.log('üèÅ loadUserData() TERMINADA');
}

// ========================================
// VERIFICACI√ìN DE ACTIVACI√ìN
// ========================================

function checkActivationStatus() {
    if (!userData) return;
    
    // Si el usuario est√° pendiente, mostrar alerta especial
    if (userData.estado === 'pendiente') {
        showPendingActivationAlert();
    }
}

// Modificar showPendingActivationAlert para que el mensaje se muestre siempre en la parte superior y no bloquee el resto del dashboard.
function showPendingActivationAlert() {
    // Crear alerta
    const alertContainer = document.createElement('div');
    alertContainer.className = 'pending-activation-alert';
    alertContainer.innerHTML = `
        <div class="alert-content">
            <div class="alert-icon">‚ö†Ô∏è</div>
            <div class="alert-text">
                <h3>Tu cuenta est√° pendiente de activaci√≥n</h3>
                <p>Para activar tu cuenta de afiliado, necesitas realizar tu primera compra en la tienda. Una vez que completes la compra, tu cuenta se activar√° autom√°ticamente.</p>
            </div>
        </div>
    `;
    // Estilos de la alerta - m√°s recatada y peque√±a
    alertContainer.style.cssText = `
        position: relative;
        margin: 15px auto 0 auto;
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
        padding: 12px 16px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        max-width: 500px;
        width: 95%;
        text-align: center;
        font-size: 0.9em;
        border-left: 4px solid #e74c3c;
    `;
    
    // Agregar estilos CSS para el contenido interno
    const style = document.createElement('style');
    style.textContent = `
        .pending-activation-alert .alert-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .pending-activation-alert .alert-icon {
            font-size: 1.2rem;
            flex-shrink: 0;
        }
        
        .pending-activation-alert .alert-text h3 {
            margin: 0 0 5px 0;
            font-size: 0.95rem;
            font-weight: 600;
        }
        
        .pending-activation-alert .alert-text p {
            margin: 0;
            line-height: 1.3;
            font-size: 0.85rem;
            opacity: 0.95;
        }
    `;
    document.head.appendChild(style);
    
    // Insertar alerta al inicio del contenido principal
    const mainContent = document.querySelector('main.content');
    if (mainContent) {
        mainContent.insertBefore(alertContainer, mainContent.firstChild);
    } else {
        document.body.insertBefore(alertContainer, document.body.firstChild);
    }
}

function irATienda() {
    // Cambiar a la pesta√±a de tienda
    const tiendaTab = document.querySelector('li[data-tab="tienda"]');
    if (tiendaTab) {
        tiendaTab.click();
    }
    
    // Cerrar la alerta
    cerrarAlerta();
}

function cerrarAlerta() {
    const alert = document.querySelector('.pending-activation-alert');
    if (alert) {
        alert.style.animation = 'slideDown 0.5s ease reverse';
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 500);
    }
}

// ========================================
// FUNCIONES DE INTERFAZ
// ========================================

function setupTabs() {
    const tabButtons = document.querySelectorAll('nav li[data-tab]');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Remover clase activa de todos los botones y pesta√±as
            tabButtons.forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            
            // Activar bot√≥n y pesta√±a seleccionada
            this.classList.add('active');
            const targetTab = document.getElementById(tabId);
            if (targetTab) {
                targetTab.classList.add('active');
                loadTabContent(tabId);
            }
        });
    });
}

function setupEventListeners() {
    // Analytics
    document.getElementById('actualizarAnalytics')?.addEventListener('click', loadAnalyticsTab);
    document.getElementById('periodoAnalytics')?.addEventListener('change', loadAnalyticsTab);
    
    // Campa√±as
    document.getElementById('btnNuevaCampana')?.addEventListener('click', showModalCampana);
    document.getElementById('cerrarModalCampana')?.addEventListener('click', hideModalCampana);
    document.getElementById('cancelarCampana')?.addEventListener('click', hideModalCampana);
    document.getElementById('formCampana')?.addEventListener('submit', handleSubmitCampana);
    
    // Notificaciones
    document.getElementById('marcarTodasLeidas')?.addEventListener('click', marcarTodasNotificacionesLeidas);
    document.getElementById('actualizarNotificaciones')?.addEventListener('click', loadNotificacionesTab);
    document.getElementById('filtroNoLeidas')?.addEventListener('change', loadNotificacionesTab);
    
    // Configuraci√≥n
    document.getElementById('formPerfil')?.addEventListener('submit', handleSubmitPerfil);
    document.getElementById('formNotificaciones')?.addEventListener('submit', handleSubmitNotificaciones);
    document.getElementById('formSeguridad')?.addEventListener('submit', handleSubmitSeguridad);
    document.getElementById('formPagos')?.addEventListener('submit', handleSubmitPagos);
}

function loadInitialTab() {
    console.log('üîÑ Cargando pesta√±a inicial...');
    const activeTab = document.querySelector('nav li.active');
    if (activeTab) {
        const tabId = activeTab.getAttribute('data-tab');
        console.log('üìã Pesta√±a activa encontrada:', tabId);
        loadTabContent(tabId);
    } else {
        console.log('‚ùå No se encontr√≥ pesta√±a activa');
    }
}

async function loadTabContent(tabID) {
    console.log(`üìä Cargando pesta√±a: ${tabID}`);
    
    switch (tabID) {
        case 'inicio':
            await loadResumenTab();
            break;
        case 'analytics':
            await loadAnalyticsTab();
            break;
        case 'mi-red':
            await loadRedTab();
            break;
        case 'comisiones':
            await loadComisionesTab();
            break;
        case 'retiros':
            await loadRetirosTab();
            break;
        case 'campanas':
            await loadCampanasTab();
            break;
        case 'material':
            await loadMaterialTab();
            break;
        case 'tienda':
            await loadTiendaTab();
            break;
        case 'notificaciones':
            await loadNotificacionesTab();
            break;
        case 'mi-testimonio':
            await loadTestimonioTab();
            break;
        case 'configuracion':
            await loadConfiguracionTab();
            break;
    }
}

// ========================================
// PESTA√ëA ANALYTICS (NUEVA)
// ========================================

async function loadAnalyticsTab() {
    try {
        showLoading('Cargando analytics...');
        
        const periodo = document.getElementById('periodoAnalytics').value;
        const cacheBuster = new Date().getTime();
        const response = await fetch(`api/afiliados/analytics.php?periodo=${periodo}&v=${cacheBuster}`, {
            credentials: 'include'
        });
        const data = await response.json();
        
        console.log('üìä Datos de Analytics recibidos:', JSON.stringify(data, null, 2));

        if (data.success) {
            analyticsData = data;
            updateAnalyticsMetrics();
            createAnalyticsCharts();
            updateProductosTop();
        } else {
            showError('Error al cargar analytics');
        }
    } catch (error) {
        console.error('Error cargando analytics:', error);
        showError('Error de conexi√≥n');
    } finally {
        hideLoading();
    }
}

function updateAnalyticsMetrics() {
    if (!analyticsData) return;
    
    const metrics = analyticsData.metricas_generales;
    const conversion = analyticsData.metricas_conversion || {};
    const crecimiento = analyticsData.tendencias?.crecimiento || {};

    // Actualizar m√©tricas principales
    updateElement('totalVentasAnalytics', metrics?.ventas?.total ?? 0);
    updateElement('volumenVentasAnalytics', formatCurrency(metrics?.ventas?.volumen ?? 0));
    updateElement('comisionesAnalytics', formatCurrency(metrics?.comisiones?.total_generadas ?? 0));
    updateElement('tasaConversion', (conversion.tasa_conversion ?? 0) + '%');

    // Actualizar indicadores de crecimiento
    updateCrecimientoElement('crecimientoVentas', crecimiento.ventas ?? 0);
    updateCrecimientoElement('crecimientoVolumen', crecimiento.volumen ?? 0);
}

function createAnalyticsCharts() {
    if (!analyticsData) return;
    
    // Gr√°fico de tendencias
    createTendenciasChart();
    
    // Gr√°fico de productos
    createProductosChart();
    
    // Gr√°fico de horarios
    createHorariosChart();
    
    // Gr√°fico de niveles
    createNivelesChart();
}

// Corregir createTendenciasChart para asegurar datos v√°lidos
function createTendenciasChart() {
    const ctx = document.getElementById('chartTendencias');
    if (!ctx) return;
    
    if (charts.tendencias) {
        charts.tendencias.destroy();
    }
    
    const tendencias = analyticsData?.tendencias?.diarias || [];
    const labels = tendencias.map(t => formatDate(t.fecha));
    const ventas = tendencias.map(t => isNaN(Number(t.ventas)) ? 0 : Number(t.ventas));
    const comisiones = tendencias.map(t => isNaN(Number(t.comisiones)) ? 0 : Number(t.comisiones));
    
    charts.tendencias = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Ventas',
                    data: ventas,
                    borderColor: '#5a67d8',
                    backgroundColor: 'rgba(90, 103, 216, 0.1)',
                    tension: 0.4
                },
                {
                    label: 'Comisiones',
                    data: comisiones,
                    borderColor: '#f59e0b',
                    backgroundColor: 'rgba(245, 158, 11, 0.1)',
                    tension: 0.4
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function createProductosChart() {
    const ctx = document.getElementById('chartProductos');
    if (!ctx) return;
    
    if (charts.productos) {
        charts.productos.destroy();
    }
    
    const productos = analyticsData.productos_top.slice(0, 5);
    const labels = productos.map(p => p.titulo.substring(0, 20) + '...');
    const ventas = productos.map(p => p.veces_vendido);
    
    charts.productos = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: ventas,
                backgroundColor: [
                    '#5a67d8',
                    '#f59e0b',
                    '#10b981',
                    '#ef4444',
                    '#8b5cf6'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                }
            }
        }
    });
}

function createHorariosChart() {
    const ctx = document.getElementById('chartHorarios');
    if (!ctx) return;
    
    if (charts.horarios) {
        charts.horarios.destroy();
    }
    
    const horarios = analyticsData.analisis_horarios;
    const labels = horarios.map(h => h.hora + ':00');
    const ventas = horarios.map(h => h.ventas);
    
    charts.horarios = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Ventas por hora',
                data: ventas,
                backgroundColor: '#10b981'
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

function createNivelesChart() {
    const ctx = document.getElementById('chartNiveles');
    if (!ctx) return;
    
    if (charts.niveles) {
        charts.niveles.destroy();
    }
    
    const niveles = analyticsData.analisis_red;
    const labels = niveles.map(n => 'Nivel ' + n.nivel);
    const afiliados = niveles.map(n => n.total_afiliados);
    const comisiones = niveles.map(n => n.comision_total_nivel);
    
    charts.niveles = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Afiliados',
                    data: afiliados,
                    backgroundColor: '#5a67d8',
                    yAxisID: 'y'
                },
                {
                    label: 'Comisiones',
                    data: comisiones,
                    backgroundColor: '#f59e0b',
                    yAxisID: 'y1'
                }
            ]
        },
        options: {
            responsive: true,
            interaction: {
                mode: 'index',
                intersect: false,
            },
            scales: {
                y: {
                    type: 'linear',
                    display: true,
                    position: 'left',
                },
                y1: {
                    type: 'linear',
                    display: true,
                    position: 'right',
                    grid: {
                        drawOnChartArea: false,
                    },
                }
            }
        }
    });
}

function updateProductosTop() {
    if (!analyticsData || !analyticsData.productos_top) {
        console.log('‚ùå No hay datos de productos_top en analyticsData');
        return;
    }
    
    const tbody = document.getElementById('tablaProductosTop');
    if (!tbody) {
        console.log('‚ùå No se encontr√≥ el tbody #tablaProductosTop');
        return;
    }
    
    tbody.innerHTML = '';
    
    // Tomar solo los primeros 10 productos
    const productosTop10 = analyticsData.productos_top.slice(0, 10);
    
    if (productosTop10.length === 0) {
        tbody.innerHTML = '<tr><td colspan="5" class="empty-state">No hay datos de productos para el per√≠odo seleccionado.</td></tr>';
        return;
    }
    
    productosTop10.forEach(producto => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <div class="product-info">
                    <img src="images/${producto.imagen_portada || 'default-book.jpg'}" alt="${producto.titulo}" class="product-image" onerror="this.src='images/default-book.jpg'">
                    <div>
                        <strong>${producto.titulo}</strong>
                        <br>
                        <small>${producto.autor}</small>
                    </div>
                </div>
            </td>
            <td class="text-center">${producto.veces_vendido}</td>
            <td class="text-right">${formatCurrency(producto.volumen_generado)}</td>
            <td class="text-right">${formatCurrency(producto.comisiones_generadas)}</td>
            <td class="text-right">${formatCurrency(producto.precio_promedio)}</td>
        `;
        tbody.appendChild(row);
    });
}

// ========================================
// PESTA√ëA CAMPA√ëAS (NUEVA)
// ========================================

async function loadCampanasTab() {
    try {
        showLoading('Cargando campa√±as...');

        // Asegurarse de que los libros est√©n disponibles para el modal
        if (librosDisponibles.length === 0) {
            // No es necesario esperar (await), puede cargar en segundo plano
            loadTiendaTab(); 
        }
        
        const response = await fetch('api/afiliados/campanas.php', {
            credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
            campanasData = data.campanas;
            renderCampanas();
        } else {
            // Fallback si la API devuelve success: false
            console.warn('‚ö†Ô∏è API de campa√±as devolvi√≥ success:false. Usando datos simulados.', data.error || 'Error desconocido');
            showAppNotification('No se pudieron cargar campa√±as, mostrando datos de ejemplo.', 'error');
            campanasData = simulatedCampanas;
            renderCampanas();
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Fallo al cargar campa√±as desde la API. Usando datos simulados de fallback.', error);
        showAppNotification('Error de conexi√≥n, mostrando datos de ejemplo.', 'error');
        
        // Fallback a datos simulados
        campanasData = simulatedCampanas;
        renderCampanas();

    } finally {
        hideLoading();
    }
}

function renderCampanas() {
    const container = document.getElementById('campanasGrid');
    if (!container) return;

    // Guard Clause: Asegurarse de que userData exista antes de renderizar
    if (!userData || !userData.codigo_afiliado) {
        console.error("‚ùå No se pueden renderizar las campa√±as porque `userData.codigo_afiliado` no est√° disponible.");
        container.innerHTML = `<div class="campana-empty"><h3>Error de Datos</h3><p>No se pudo cargar la informaci√≥n del afiliado para generar los enlaces de campa√±a. Por favor, recarga la p√°gina.</p></div>`;
        return;
    }

    if (!campanasData || campanasData.length === 0) {
        container.innerHTML = `
            <div class="campana-empty">
                <h3>No tienes campa√±as creadas</h3>
                <p>Crea tu primera campa√±a para empezar a promocionar productos espec√≠ficos.</p>
                <button onclick="showModalCampana()" class="btn btn-primary">Crear Primera Campa√±a</button>
            </div>
        `;
        return;
    }

    container.innerHTML = campanasData.map(campana => {
        const objetivoVentas = campana.objetivo_ventas || 0;
        const ventasGeneradas = campana.ventas_generadas || 0;
        const progressPercentage = objetivoVentas > 0 ? (ventasGeneradas / objetivoVentas) * 100 : 0;
        
        let enlaceCampana = '';
        // Si la campa√±a tiene un libro asociado, el enlace va a la p√°gina de pago de ese libro.
        if (campana.libro_id) {
            enlaceCampana = `${window.location.origin}/pago.html?libro=${campana.libro_id}&ref=${userData.codigo_afiliado}&campaign=${campana.enlace_personalizado}`;
        } else {
            enlaceCampana = `${window.location.origin}/registro.html?ref=${userData.codigo_afiliado}&campaign=${campana.enlace_personalizado}`;
        }

        return `
            <div class="campana-card">
                <div class="campana-header">
                    <h3>${campana.nombre}</h3>
                    <span class="campana-status ${campana.estado}">${campana.estado}</span>
                </div>
                <div class="campana-content">
                    <p>${campana.descripcion}</p>
                    
                    <div class="campana-stats">
                        <div class="stat">
                            <span class="stat-icon">üí∞</span>
                            <span class="stat-label">Ventas</span>
                            <span class="stat-value">${ventasGeneradas}</span>
                        </div>
                        <div class="stat">
                            <span class="stat-icon">üìà</span>
                            <span class="stat-label">Volumen</span>
                            <span class="stat-value">${formatCurrency(campana.volumen_generado || 0)}</span>
                        </div>
                        <div class="stat">
                            <span class="stat-icon">üíµ</span>
                            <span class="stat-label">Comisiones</span>
                            <span class="stat-value">${formatCurrency(campana.comisiones_generadas || 0)}</span>
                        </div>
                    </div>

                    ${objetivoVentas > 0 ? `
                    <div class="campana-progress">
                        <div class="progress-bar-container">
                            <div class="progress-bar" style="width: ${progressPercentage}%;"></div>
                        </div>
                        <small>${ventasGeneradas} de ${objetivoVentas} ventas</small>
                    </div>
                    ` : ''}

                    <div class="campana-enlace">
                        <input type="text" value="${enlaceCampana}" readonly>
                        <button onclick="copiarEnlaceInput(this)">Copiar</button>
                    </div>
                </div>
                <div class="campana-actions">
                    <button onclick="editarCampana(${campana.id})" class="btn btn-secondary">Editar</button>
                    <button onclick="eliminarCampana(${campana.id})" class="btn btn-danger">Eliminar</button>
                </div>
            </div>
        `;
    }).join('');
}

function showModalCampana(campanaId = null) {
    const modal = document.getElementById('modalCampana');
    const titulo = document.getElementById('tituloModalCampana');
    const form = document.getElementById('formCampana');
    
    // Poblar el selector de libros
    const selectLibro = document.getElementById('libroCampana');
    if (selectLibro) {
        selectLibro.innerHTML = '<option value="">-- Enlace de registro general --</option>'; // Opci√≥n por defecto
        librosDisponibles.forEach(libro => {
            const option = document.createElement('option');
            option.value = libro.id;
            option.textContent = libro.titulo;
            selectLibro.appendChild(option);
        });
    } else {
        console.warn('Elemento #libroCampana no encontrado en el modal.');
    }

    if (campanaId) {
        // Modo edici√≥n
        const campana = campanasData.find(c => c.id == campanaId);
        if (campana) {
            titulo.textContent = 'Editar Campa√±a';
            form.dataset.campanaId = campanaId;
            
            document.getElementById('nombreCampana').value = campana.nombre;
            document.getElementById('descripcionCampana').value = campana.descripcion;
            document.getElementById('objetivoVentas').value = campana.objetivo_ventas || '';
            document.getElementById('fechaInicio').value = campana.fecha_inicio;
            document.getElementById('fechaFin').value = campana.fecha_fin || '';
            document.getElementById('enlacePersonalizado').value = campana.enlace_personalizado || '';
            if (selectLibro) {
                selectLibro.value = campana.libro_id || '';
            }
        }
    } else {
        // Modo creaci√≥n
        titulo.textContent = 'Nueva Campa√±a';
        form.dataset.campanaId = '';
        form.reset();
        document.getElementById('fechaInicio').value = new Date().toISOString().split('T')[0];
    }
    
    modal.style.display = 'block';
}

function hideModalCampana() {
    const modal = document.getElementById('modalCampana');
    modal.style.display = 'none';
}

async function handleSubmitCampana(event) {
    event.preventDefault();
    
    const formData = {
        nombre: document.getElementById('nombreCampana').value,
        descripcion: document.getElementById('descripcionCampana').value,
        objetivo_ventas: document.getElementById('objetivoVentas').value,
        fecha_inicio: document.getElementById('fechaInicio').value,
        fecha_fin: document.getElementById('fechaFin').value,
        enlace_personalizado: document.getElementById('enlacePersonalizado').value,
        libro_id: document.getElementById('libroCampana')?.value || null
    };
    
    const campanaId = event.target.dataset.campanaId;
    const method = campanaId ? 'PUT' : 'POST';
    const url = campanaId ? `api/afiliados/campanas.php?id=${campanaId}` : 'api/afiliados/campanas.php';
    
    try {
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData),
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess(campanaId ? 'Campa√±a actualizada' : 'Campa√±a creada');
            hideModalCampana();
            await loadCampanasTab();
        } else {
            showError(data.error || 'Error al guardar campa√±a');
        }
    } catch (error) {
        console.error('Error guardando campa√±a:', error);
        showError('Error de conexi√≥n');
    }
}

async function eliminarCampana(campanaId) {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar esta campa√±a?')) {
        return;
    }
    
    try {
        const response = await fetch(`api/afiliados/campanas.php?id=${campanaId}`, {
            method: 'DELETE',
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Campa√±a eliminada');
            await loadCampanasTab();
        } else {
            showError(data.error || 'Error al eliminar campa√±a');
        }
    } catch (error) {
        console.error('Error eliminando campa√±a:', error);
        showError('Error de conexi√≥n');
    }
}

// ========================================
// PESTA√ëA NOTIFICACIONES (NUEVA)
// ========================================

async function loadNotificacionesTab() {
    try {
        const noLeidas = document.getElementById('filtroNoLeidas').checked;
        const url = `api/afiliados/notificaciones.php?no_leidas=${noLeidas}`;
        
        const response = await fetch(url, {
            credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
            notificacionesData = data;
            renderNotificaciones();
            updateContadorNotificaciones();
        }
    } catch (error) {
        console.error('Error cargando notificaciones:', error);
    }
}

function renderNotificaciones() {
    const container = document.getElementById('notificacionesList');
    if (!container) return;
    
    if (!notificacionesData.notificaciones || notificacionesData.notificaciones.length === 0) {
        container.innerHTML = `
            <div class="notificacion-empty">
                <h3>No hay notificaciones</h3>
                <p>Cuando tengas nuevas actividades, aparecer√°n aqu√≠.</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = notificacionesData.notificaciones.map(notif => `
        <div class="notificacion-item ${notif.leida ? 'leida' : 'no-leida'}" data-id="${notif.id}">
            <div class="notificacion-icon">
                ${getNotificacionIcon(notif.tipo)}
            </div>
            <div class="notificacion-content">
                <h4>${notif.titulo_formateado}</h4>
                <p>${notif.mensaje}</p>
                <small>${formatDate(notif.fecha_creacion)}</small>
            </div>
            <div class="notificacion-actions">
                ${!notif.leida ? `<button onclick="marcarNotificacionLeida(${notif.id})" class="btn btn-sm">Marcar le√≠da</button>` : ''}
            </div>
        </div>
    `).join('');
}

function getNotificacionIcon(tipo) {
    const icons = {
        'venta': 'üí∞',
        'comision': 'üíµ',
        'retiro': 'üè¶',
        'nuevo_afiliado': 'üë•',
        'meta': 'üéØ',
        'sistema': 'üîî'
    };
    return icons[tipo] || 'üì¢';
}

function updateContadorNotificaciones() {
    const contador = document.getElementById('contadorNotificaciones');
    if (contador && notificacionesData) {
        contador.textContent = notificacionesData.no_leidas;
    }
}

async function marcarNotificacionLeida(notificacionId) {
    try {
        const response = await fetch('api/afiliados/notificaciones.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ notificacion_id: notificacionId }),
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            await loadNotificacionesTab();
        }
    } catch (error) {
        console.error('Error marcando notificaci√≥n:', error);
    }
}

async function marcarTodasNotificacionesLeidas() {
    try {
        const response = await fetch('api/afiliados/notificaciones.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ marcar_todas: true }),
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Todas las notificaciones marcadas como le√≠das');
            await loadNotificacionesTab();
        }
    } catch (error) {
        console.error('Error marcando notificaciones:', error);
    }
}

// ========================================
// PESTA√ëA MI TESTIMONIO
// ========================================

async function loadTestimonioTab() {
    console.log('üìù Cargando pesta√±a Mi Testimonio');
    
    // Configurar contador de caracteres
    const textarea = document.getElementById('testimonioTexto');
    const charCount = document.querySelector('.char-count');
    
    if (textarea && charCount) {
        textarea.addEventListener('input', function() {
            const length = this.value.length;
            charCount.textContent = `${length}/500 caracteres`;
            
            // Cambiar color seg√∫n el l√≠mite
            charCount.classList.remove('near-limit', 'at-limit');
            if (length >= 450) {
                charCount.classList.add('near-limit');
            }
            if (length >= 500) {
                charCount.classList.add('at-limit');
            }
        });
    }
    
    // Configurar formulario
    const form = document.getElementById('formTestimonio');
    if (form) {
        form.addEventListener('submit', handleSubmitTestimonio);
    }
}

async function handleSubmitTestimonio(event) {
    event.preventDefault();
    
    const form = event.target;
    const submitBtn = document.getElementById('btnEnviarTestimonio');
    const mensajeDiv = document.getElementById('mensajeTestimonio');
    
    // Validar formulario
    const testimonio = document.getElementById('testimonioTexto').value.trim();
    const aceptarPublicacion = document.getElementById('aceptarPublicacion').checked;
    
    if (!testimonio) {
        showMensajeTestimonio('Por favor escribe tu testimonio', 'error');
        return;
    }
    
    if (testimonio.length < 50) {
        showMensajeTestimonio('El testimonio debe tener al menos 50 caracteres', 'error');
        return;
    }
    
    if (!aceptarPublicacion) {
        showMensajeTestimonio('Debes aceptar que tu testimonio sea publicado', 'error');
        return;
    }
    
    // Deshabilitar bot√≥n y mostrar carga
    submitBtn.disabled = true;
    submitBtn.textContent = 'Enviando...';
    
    try {
        // Crear FormData para enviar archivos
        const formData = new FormData();
        formData.append('testimonio', testimonio);
        
        const imagenInput = document.getElementById('testimonioImagen');
        if (imagenInput.files.length > 0) {
            formData.append('imagen', imagenInput.files[0]);
        }
        
        // Enviar testimonio
        const response = await fetch('api/testimonios/enviar_testimonio.php', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMensajeTestimonio(data.message, 'success');
            form.reset();
            document.querySelector('.char-count').textContent = '0/500 caracteres';
        } else {
            showMensajeTestimonio(data.error || 'Error al enviar testimonio', 'error');
        }
    } catch (error) {
        console.error('Error enviando testimonio:', error);
        showMensajeTestimonio('Error de conexi√≥n', 'error');
    } finally {
        // Restaurar bot√≥n
        submitBtn.disabled = false;
        submitBtn.textContent = 'Enviar Testimonio';
    }
}

function showMensajeTestimonio(mensaje, tipo) {
    const mensajeDiv = document.getElementById('mensajeTestimonio');
    if (mensajeDiv) {
        mensajeDiv.textContent = mensaje;
        mensajeDiv.className = `mensaje ${tipo}`;
        mensajeDiv.style.display = 'block';
        
        // Ocultar mensaje despu√©s de 5 segundos
        setTimeout(() => {
            mensajeDiv.style.display = 'none';
        }, 5000);
    }
}

// ========================================
// PESTA√ëA CONFIGURACI√ìN (NUEVA)
// ========================================

async function loadConfiguracionTab() {
    // Cargar datos del perfil
    if (userData) {
        document.getElementById('nombrePerfil').value = userData.nombre || '';
        document.getElementById('emailPerfil').value = userData.email || '';
        // Cargar otros campos si est√°n disponibles
    }
    
    // Cargar configuraci√≥n de notificaciones
    await loadConfiguracionNotificaciones();
}

async function loadConfiguracionNotificaciones() {
    try {
        const response = await fetch('api/afiliados/notificaciones.php', {
            credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success && data.configuracion) {
            const config = data.configuracion;
            
            document.getElementById('emailVentas').checked = config.email_ventas;
            document.getElementById('emailComisiones').checked = config.email_comisiones;
            document.getElementById('emailRetiros').checked = config.email_retiros;
            document.getElementById('emailNuevosAfiliados').checked = config.email_nuevos_afiliados;
            document.getElementById('pushVentas').checked = config.push_ventas;
            document.getElementById('pushComisiones').checked = config.push_comisiones;
            document.getElementById('pushRetiros').checked = config.push_retiros;
            document.getElementById('pushNuevosAfiliados').checked = config.push_nuevos_afiliados;
        }
    } catch (error) {
        console.error('Error cargando configuraci√≥n:', error);
    }
}

async function handleSubmitPerfil(event) {
    event.preventDefault();
    
    const formData = {
        nombre: document.getElementById('nombrePerfil').value,
        email: document.getElementById('emailPerfil').value,
        telefono: document.getElementById('telefonoPerfil').value,
        pais: document.getElementById('paisPerfil').value
    };
    
    try {
        // Aqu√≠ ir√≠a la llamada al API para actualizar perfil
        showSuccess('Perfil actualizado correctamente');
    } catch (error) {
        console.error('Error actualizando perfil:', error);
        showError('Error al actualizar perfil');
    }
}

async function handleSubmitNotificaciones(event) {
    event.preventDefault();
    
    const configuracion = {
        email_ventas: document.getElementById('emailVentas').checked,
        email_comisiones: document.getElementById('emailComisiones').checked,
        email_retiros: document.getElementById('emailRetiros').checked,
        email_nuevos_afiliados: document.getElementById('emailNuevosAfiliados').checked,
        push_ventas: document.getElementById('pushVentas').checked,
        push_comisiones: document.getElementById('pushComisiones').checked,
        push_retiros: document.getElementById('pushRetiros').checked,
        push_nuevos_afiliados: document.getElementById('pushNuevosAfiliados').checked
    };
    
    try {
        const response = await fetch('api/afiliados/notificaciones.php', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(configuracion),
            credentials: 'include'
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Preferencias guardadas correctamente');
        } else {
            showError('Error al guardar preferencias');
        }
    } catch (error) {
        console.error('Error guardando preferencias:', error);
        showError('Error de conexi√≥n');
    }
}

async function handleSubmitSeguridad(event) {
    event.preventDefault();
    
    const passwordActual = document.getElementById('passwordActual').value;
    const passwordNueva = document.getElementById('passwordNueva').value;
    const passwordConfirmar = document.getElementById('passwordConfirmar').value;
    
    if (passwordNueva !== passwordConfirmar) {
        showError('Las contrase√±as no coinciden');
        return;
    }
    
    try {
        // Aqu√≠ ir√≠a la llamada al API para cambiar contrase√±a
        showSuccess('Contrase√±a cambiada correctamente');
        event.target.reset();
    } catch (error) {
        console.error('Error cambiando contrase√±a:', error);
        showError('Error al cambiar contrase√±a');
    }
}

async function handleSubmitPagos(event) {
    event.preventDefault();
    
    const formData = {
        metodo_pago: document.getElementById('metodoPago').value,
        numero_cuenta: document.getElementById('numeroCuenta').value,
        titular_cuenta: document.getElementById('titularCuenta').value,
        monto_minimo_retiro: document.getElementById('montoMinimoRetiro').value
    };
    
    try {
        // Aqu√≠ ir√≠a la llamada al API para guardar configuraci√≥n de pagos
        showSuccess('Configuraci√≥n de pagos guardada');
    } catch (error) {
        console.error('Error guardando configuraci√≥n de pagos:', error);
        showError('Error al guardar configuraci√≥n');
    }
}

// ========================================
// FUNCIONES ORIGINALES (MANTENER COMPATIBILIDAD)
// ========================================

async function loadResumenTab() {
    console.log('üîÑ Cargando pesta√±a de resumen...');
    
    // Cargar informaci√≥n completa del usuario
    if (userData) {
        console.log('üë§ Datos del usuario disponibles, actualizando informaci√≥n...');
        updateUserInfo();
    } else {
        console.log('‚ùå No hay datos del usuario disponibles');
    }
    
    // Cargar estad√≠sticas del dashboard
    if (dashboardData) {
        console.log('üìä Datos del dashboard disponibles, actualizando estad√≠sticas...');
        updateDashboardStats();
    } else {
        console.log('‚ùå No hay datos del dashboard disponibles');
    }
    
    // Cargar actividad reciente
    if (dashboardData && dashboardData.datos_recientes) {
        console.log('üìà Datos recientes disponibles, actualizando actividad...');
        updateActividadReciente();
    } else {
        console.log('‚ùå No hay datos recientes disponibles');
    }
    
    // Crear gr√°fico de tendencias si hay datos
    if (dashboardData && dashboardData.datos_graficos) {
        console.log('üìä Datos de gr√°ficos disponibles, creando gr√°fico...');
        createTendenciasChart();
    } else {
        console.log('‚ùå No hay datos de gr√°ficos disponibles');
    }
    
    console.log('‚úÖ Pesta√±a de resumen cargada');
}

function updateActividadReciente() {
    if (!dashboardData || !dashboardData.datos_recientes) return;
    
    const container = document.getElementById('actividadReciente');
    if (!container) return;
    
    const actividades = [];
    
    // Agregar ventas recientes
    if (dashboardData.datos_recientes.ventas) {
        dashboardData.datos_recientes.ventas.forEach(venta => {
            actividades.push({
                tipo: 'venta',
                mensaje: `Nueva venta: ${venta.libro_titulo}`,
                monto: isNaN(Number(venta.precio)) ? 0 : Number(venta.precio),
                fecha: venta.fecha_venta,
                icono: 'üí∞'
            });
        });
    }
    
    // Agregar comisiones recientes
    if (dashboardData.datos_recientes.comisiones) {
        dashboardData.datos_recientes.comisiones.forEach(comision => {
            actividades.push({
                tipo: 'comision',
                mensaje: `Comisi√≥n generada: Nivel ${comision.nivel}`,
                monto: isNaN(Number(comision.monto)) ? 0 : Number(comision.monto),
                fecha: comision.fecha_generacion,
                icono: 'üíµ'
            });
        });
    }
    
    // Agregar retiros recientes
    if (dashboardData.datos_recientes.retiros) {
        dashboardData.datos_recientes.retiros.forEach(retiro => {
            actividades.push({
                tipo: 'retiro',
                mensaje: `Retiro solicitado: ${retiro.metodo}`,
                monto: isNaN(Number(retiro.monto)) ? 0 : Number(retiro.monto),
                fecha: retiro.fecha_solicitud,
                icono: 'üè¶'
            });
        });
    }
    
    // Ordenar por fecha (m√°s recientes primero)
    actividades.sort((a, b) => new Date(b.fecha) - new Date(a.fecha));
    
    // Mostrar solo las 5 m√°s recientes
    const actividadesRecientes = actividades.slice(0, 5);
    
    if (actividadesRecientes.length === 0) {
        container.innerHTML = '<p class="empty-state">No hay actividad reciente</p>';
        return;
    }
    
    container.innerHTML = actividadesRecientes.map(actividad => `
        <div class="actividad-item">
            <div class="actividad-icon">${actividad.icono}</div>
            <div class="actividad-content">
                <h4>${actividad.mensaje}</h4>
                <p>${formatCurrency(isNaN(actividad.monto) ? 0 : actividad.monto)}</p>
                <small>${formatDate(actividad.fecha)}</small>
            </div>
        </div>
    `).join('');
}

async function loadRedTab() {
    const container = document.getElementById('accordionRed');
    if (!container) return;

    if (!dashboardData || !dashboardData.datos_recientes || !dashboardData.datos_recientes.red_afiliados) {
        container.innerHTML = '<p class="empty-state">No tienes afiliados en tu red a√∫n.</p>';
        return;
    }

    const red = dashboardData.datos_recientes.red_afiliados;

    if (red.length === 0) {
        container.innerHTML = '<p class="empty-state">No tienes afiliados en tu red a√∫n.</p>';
        return;
    }

    container.innerHTML = red.map(afiliado => `
        <div class="accordion-item">
            <button class="accordion-header">
                <span class="afiliado-nombre">${afiliado.nombre}</span>
                <span class="afiliado-stats">
                    <span>Nivel: ${afiliado.nivel}</span>
                    <span>Ventas: ${afiliado.ventas_totales || 0}</span>
                    <span>Comisiones: ${formatCurrency(afiliado.comision_total || 0)}</span>
                </span>
            </button>
            <div class="accordion-content">
                <p><strong>C√≥digo:</strong> ${afiliado.codigo_afiliado}</p>
                <p><strong>Estado:</strong> <span class="estado-badge ${afiliado.estado_usuario}">${afiliado.estado_usuario}</span></p>
                <p><strong>Afiliados directos:</strong> ${afiliado.hijos_directos || 0}</p>
            </div>
        </div>
    `).join('');

    // A√±adir interactividad al acorde√≥n
    container.querySelectorAll('.accordion-header').forEach(button => {
        button.addEventListener('click', () => {
            const content = button.nextElementSibling;
            button.parentElement.classList.toggle('active');
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + "px";
            }
        });
    });
}

async function loadComisionesTab() {
    console.log('üí∞ Cargando pesta√±a de comisiones...');
    console.log('üîç Funci√≥n loadComisionesTab() iniciada');
    
    try {
        // 1. Actualizar tarjetas de comisiones con datos del dashboard
        if (dashboardData && dashboardData.estadisticas && dashboardData.estadisticas.comisiones) {
            const comisiones = dashboardData.estadisticas.comisiones;
            
            // Actualizar tarjetas principales
            updateElement('comisionesTotalGanado', formatCurrency(comisiones.total_ganado || 0));
            updateElement('comisionesPagadas', formatCurrency(comisiones.comisiones_pagadas || 0));
            updateElement('comisionesPendientes', formatCurrency(comisiones.comisiones_pendientes || 0));
            
            console.log('‚úÖ Tarjetas de comisiones actualizadas');
        }
        
        // 2. Cargar comisiones detalladas desde la API
        const response = await fetch('api/afiliados/comisiones_simple.php', {
            credentials: 'include'
        });
        
        if (response.ok) {
            const data = await response.json();
            
            console.log('üìä Datos recibidos del endpoint:', data);
            
            if (data.success) {
                // Actualizar tarjetas con datos de la API
                if (data.estadisticas) {
                    console.log('üí∞ Estad√≠sticas recibidas:', data.estadisticas);
                    
                    const totalGanado = data.estadisticas.total_ganado || 0;
                    const comisionesPagadas = data.estadisticas.comisiones_pagadas || 0;
                    const comisionesPendientes = data.estadisticas.comisiones_pendientes || 0;
                    
                    console.log('üìà Valores a actualizar:');
                    console.log('- Total ganado:', totalGanado);
                    console.log('- Comisiones pagadas:', comisionesPagadas);
                    console.log('- Comisiones pendientes:', comisionesPendientes);
                    
                    updateElement('comisionesTotalGanado', formatCurrency(totalGanado));
                    updateElement('comisionesPagadas', formatCurrency(comisionesPagadas));
                    updateElement('comisionesPendientes', formatCurrency(comisionesPendientes));
                    
                    console.log('‚úÖ Tarjetas actualizadas con datos de la API');
                } else {
                    console.error('‚ùå No se encontraron estad√≠sticas en la respuesta');
                }
                
                // Guardar comisiones detalladas y actualizar la tabla
                comisionesDetalladas = data.comisiones || [];
                renderComisionesTable(comisionesDetalladas);
                
                // Crear gr√°fico de comisiones por nivel
                createComisionesChart(comisionesDetalladas);
                
                // Configurar filtros
                setupComisionesFilters(comisionesDetalladas);
                
                console.log('‚úÖ Comisiones cargadas correctamente');
            } else {
                console.error('‚ùå Error en respuesta de comisiones:', data.error);
                showError('Error cargando comisiones');
            }
        } else {
            console.error('‚ùå Error en petici√≥n de comisiones:', response.status);
            showError('Error de conexi√≥n');
        }
        
    } catch (error) {
        console.error('‚ùå Error cargando comisiones:', error);
        showError('Error de conexi√≥n');
    }
}

function renderComisionesTable(comisiones) {
    const tbody = document.getElementById('tablaComisionesBody');
    if (!tbody) return;
    
    if (!comisiones || comisiones.length === 0) {
        tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #666;">No hay comisiones registradas</td></tr>';
        return;
    }
    
    tbody.innerHTML = comisiones.map(comision => `
        <tr>
            <td>Nivel ${comision.nivel || 1}</td>
            <td>${formatCurrency(comision.monto)}</td>
            <td><span class="estado-badge ${comision.estado}">${comision.estado}</span></td>
            <td>${formatDate(comision.fecha_generacion)}</td>
        </tr>
    `).join('');
}

function createComisionesChart(comisiones) {
    const ctx = document.getElementById('graficoComisionesPorNivel');
    if (!ctx) return;
    
    // Destruir gr√°fico existente si hay uno
    if (charts.comisionesPorNivel) {
        charts.comisionesPorNivel.destroy();
    }
    
    // Agrupar comisiones por nivel
    const comisionesPorNivel = {};
    comisiones.forEach(comision => {
        const nivel = comision.nivel || 1;
        if (!comisionesPorNivel[nivel]) {
            comisionesPorNivel[nivel] = 0;
        }
        comisionesPorNivel[nivel] += parseFloat(comision.monto);
    });
    
    const niveles = Object.keys(comisionesPorNivel).sort((a, b) => parseInt(a) - parseInt(b));
    const montos = niveles.map(nivel => comisionesPorNivel[nivel]);
    
    charts.comisionesPorNivel = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: niveles.map(nivel => `Nivel ${nivel}`),
            datasets: [{
                label: 'Comisiones por Nivel',
                data: montos,
                backgroundColor: '#5a67d8',
                borderColor: '#4c51bf',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });
}

function setupComisionesFilters(comisiones) {
    // Configurar filtro por nivel
    const filtroNivel = document.getElementById('filtroNivel');
    if (filtroNivel) {
        filtroNivel.addEventListener('change', function() {
            filtrarComisiones();
        });
    }
    
    // Configurar filtro por estado
    const filtroEstado = document.getElementById('filtro-estado');
    if (filtroEstado) {
        filtroEstado.addEventListener('change', function() {
            filtrarComisiones();
        });
    }
    
    // Configurar bot√≥n de descarga
    const descargarBtn = document.getElementById('descargarBtn');
    if (descargarBtn) {
        descargarBtn.addEventListener('click', function() {
            descargarReporteComisiones(comisiones);
        });
    }
}

function filtrarComisiones() {
    const filtroNivel = document.getElementById('filtroNivel');
    const filtroEstado = document.getElementById('filtro-estado');
    const tbody = document.getElementById('tablaComisionesBody');
    
    if (!filtroNivel || !filtroEstado || !tbody) return;
    
    const nivelSeleccionado = filtroNivel.value;
    const estadoSeleccionado = filtroEstado.value;
    
    // Usar la lista completa de comisiones detalladas
    const comisiones = comisionesDetalladas;
    
    // Filtrar comisiones
    const comisionesFiltradas = comisiones.filter(comision => {
        const cumpleNivel = !nivelSeleccionado || comision.nivel == nivelSeleccionado;
        const cumpleEstado = estadoSeleccionado === 'todos' || comision.estado === estadoSeleccionado;
        return cumpleNivel && cumpleEstado;
    });
    
    // Renderizar tabla filtrada
    renderComisionesTable(comisionesFiltradas);
}

function descargarReporteComisiones(comisiones) {
    try {
        // Crear datos para Excel
        const datos = comisiones.map(comision => ({
            'Nivel': comision.nivel || 1,
            'Monto': comision.monto,
            'Estado': comision.estado,
            'Fecha': comision.fecha_generacion
        }));
        
        // Crear workbook
        const ws = XLSX.utils.json_to_sheet(datos);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Comisiones");
        
        // Descargar archivo
        const nombreArchivo = `comisiones_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, nombreArchivo);
        
        showSuccess('Reporte descargado correctamente');
    } catch (error) {
        console.error('Error descargando reporte:', error);
        showError('Error al descargar reporte');
    }
}

async function loadRetirosTab() {
    // Implementaci√≥n original de retiros
    if (dashboardData && dashboardData.datos_recientes) {
        const retiros = dashboardData.datos_recientes.retiros;
        const tbody = document.getElementById('tablaRetirosBody');
        if (tbody) {
            tbody.innerHTML = retiros.map(retiro => `
                <tr>
                    <td>${formatCurrency(retiro.monto)}</td>
                    <td>${retiro.metodo}</td>
                    <td>${retiro.estado}</td>
                    <td>${formatDate(retiro.fecha_solicitud)}</td>
                </tr>
            `).join('');
        }
    }
}

async function loadMaterialTab() {
    // Implementaci√≥n original de material
    if (userData) {
        const enlaceElement = document.getElementById('linkAfiliado');
        if (enlaceElement) {
            enlaceElement.value = userData.enlace_afiliado;
        }
        
        const qrElement = document.getElementById('qrAfiliadoMaterial');
        if (qrElement) {
            qrElement.src = userData.qr_code;
        }
    }
}

async function loadTiendaTab() {
    console.log('üõí Cargando tienda en el dashboard...');
    
    try {
        const response = await fetch('api/libros/disponibles.php', {
            credentials: 'include'
        });
        const data = await response.json();
        
        if (data.success) {
            librosDisponibles = data.libros; // Guardar libros en la variable global
            const contenedorLibros = document.getElementById('contenedorLibros');
            if (contenedorLibros) {
                contenedorLibros.innerHTML = librosDisponibles.map(libro => `
                    <div class="libro-card" onclick="mostrarModalLibro(${libro.id})">
                        <img src="images/${libro.imagen_portada || 'default-book.jpg'}" alt="${libro.titulo}" onerror="this.src='images/default-book.jpg'">
                        <h4>${libro.titulo}</h4>
                        <p>${libro.descripcion}</p>
                        <div class="libro-precio">
                            <span class="precio-original">$${libro.precio ? parseFloat(libro.precio).toLocaleString() : '0'}</span>
                            <span class="precio-afiliado">$${libro.precio_afiliado ? parseFloat(libro.precio_afiliado).toLocaleString() : '0'}</span>
                        </div>
                    </div>
                `).join('');
                console.log('‚úÖ Libros cargados en el dashboard');
            }
        } else {
            console.error('‚ùå Error cargando libros:', data.error);
            showError('Error cargando libros');
        }
    } catch (error) {
        console.error('‚ùå Error cargando tienda:', error);
        showError('Error de conexi√≥n');
    }
}

function mostrarModalLibro(libroId) {
    const libro = librosDisponibles.find(l => l.id == libroId);
    if (!libro) {
        console.error('‚ùå Libro no encontrado con ID:', libroId);
        return;
    }

    console.log('üìñ Mostrando modal del libro:', libro.titulo);
    
    const modal = document.getElementById('detalleLibro');
    if (!modal) {
        console.error('‚ùå Modal no encontrado');
        return;
    }
    
    // Imagen grande del libro
    const portadaElement = modal.querySelector('.modal-portada');
    if (portadaElement) {
        portadaElement.src = `images/${libro.imagen_portada || 'default-book.jpg'}`;
        portadaElement.onerror = function() {
            this.src = 'images/default-book.jpg';
        };
    }
    
    // Precio
    const precioElement = modal.querySelector('.modal-precio');
    if (precioElement) {
        console.log('üí∞ Datos del precio en el modal:');
        console.log('  - libro.precio_afiliado:', libro.precio_afiliado);
        console.log('  - Tipo:', typeof libro.precio_afiliado);
        console.log('  - libro.precio:', libro.precio);
        
        let precioFormateado = '0';
        
        if (libro.precio_afiliado && libro.precio_afiliado !== null && libro.precio_afiliado !== undefined) {
            precioFormateado = parseFloat(libro.precio_afiliado).toLocaleString();
        } else if (libro.precio && libro.precio !== null && libro.precio !== undefined) {
            console.log('‚ö†Ô∏è Usando precio normal en lugar de precio_afiliado');
            precioFormateado = parseFloat(libro.precio).toLocaleString();
        }
        
        console.log('üí∞ Precio formateado final:', precioFormateado);
        precioElement.textContent = `$${precioFormateado}`;
    }
    
    // T√≠tulo y descripci√≥n
    const tituloElement = modal.querySelector('.modal-titulo');
    if (tituloElement) {
        tituloElement.textContent = libro.titulo;
    }
    
    const descripcionElement = modal.querySelector('.modal-descripcion');
    if (descripcionElement) {
        descripcionElement.textContent = libro.descripcion;
    }
    
    // Foto y nombre del autor
    const autorFotoElement = modal.querySelector('.modal-autor-foto');
    if (autorFotoElement) {
        autorFotoElement.src = `images/${libro.autor_foto || 'default-author.jpg'}`;
        autorFotoElement.onerror = function() {
            this.src = 'images/default-author.jpg';
        };
    }
    
    const autorNombreElement = modal.querySelector('.modal-autor-nombre');
    if (autorNombreElement) {
        autorNombreElement.innerHTML = `<strong>${libro.autor_nombre}</strong>`;
    }
    
    // Bio del autor
    const autorBioElement = modal.querySelector('.modal-autor-bio');
    if (autorBioElement) {
        autorBioElement.textContent = libro.autor_bio || 'Biograf√≠a no disponible';
    }
    
    // Configurar bot√≥n de compra
    const comprarBtn = modal.querySelector('#comprarLibroDashboardBtn');
    if (comprarBtn) {
        console.log('üõí Configurando bot√≥n de compra para libro ID:', libro.id);
        comprarBtn.onclick = function() {
            console.log('üõí Bot√≥n de compra clickeado para libro ID:', libro.id);
            comprarLibro(libro.id);
        };
    } else {
        console.error('‚ùå Bot√≥n de compra no encontrado en el modal');
    }
    
    // Mostrar modal
    modal.style.display = 'block';
    
    // Configurar cierre del modal
    const cerrarBtn = modal.querySelector('#cerrarDetalle');
    if (cerrarBtn) {
        cerrarBtn.onclick = function() {
            modal.style.display = 'none';
        };
    }
    
    // Cerrar al hacer clic fuera del modal
    window.onclick = function(event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };
    
    console.log('‚úÖ Modal del libro mostrado correctamente');
}

// ========================================
// FUNCIONES AUXILIARES
// ========================================

function updateUserInfo() {
    console.log('üîÑ updateUserInfo() iniciada');
    console.log('üë§ userData disponible:', userData);
    
    if (!userData) {
        console.log('‚ùå No hay datos del usuario disponibles');
        return;
    }

    console.log('üë§ Actualizando informaci√≥n del usuario:', userData);

    // Actualizar saludo principal
    const saludoElement = document.querySelector('h1');
    console.log('üìù Elemento h1 encontrado:', saludoElement ? 'S√≠' : 'No');
    if (saludoElement) {
        saludoElement.textContent = `Bienvenido, ${userData.nombre}`;
        console.log('‚úÖ Saludo actualizado:', saludoElement.textContent);
    }

    // Informaci√≥n b√°sica del afiliado
    console.log('üìù Actualizando elementos b√°sicos...');
    
    // ID de afiliado - usar datos del dashboard si est√°n disponibles
    const afiliadoId = dashboardData?.afiliado?.codigo_afiliado ?? userData.codigo_afiliado ?? 'N/A';
    updateElement('afiliadoId', afiliadoId);
    
    updateElement('afiliadoNombre', userData.nombre ?? 'N/A');
    updateElement('emailAfiliado', userData.email ?? 'N/A');
    
    // Fecha de registro - usar datos del dashboard si est√°n disponibles
    const fechaRegistro = dashboardData?.afiliado?.fecha_registro ?? userData.fecha_registro;
    updateElement('fechaRegistro', fechaRegistro ? formatDate(fechaRegistro) : 'N/A');
    
    // Nivel - usar datos del dashboard si est√°n disponibles
    const nivel = dashboardData?.afiliado?.nivel ?? userData.nivel;
    updateElement('nivelAfiliado', nivel !== undefined && nivel !== null ? `Nivel ${nivel}` : 'N/A');

    // Estado de activaci√≥n
    const estadoElement = document.getElementById('estadoActivacion');
    console.log('üìù Elemento estadoActivacion encontrado:', estadoElement ? 'S√≠' : 'No');
    if (estadoElement) {
        const estado = userData.estado ?? 'pendiente';
        const estadoText = estado === 'activo' ? 'Activo' : 
                          estado === 'pendiente' ? 'Pendiente' : 
                          estado === 'inactivo' ? 'Inactivo' : 'Desconocido';
        estadoElement.textContent = estadoText;
        estadoElement.className = `estado-badge ${estado}`;
        console.log('‚úÖ Estado actualizado:', estadoText);
    }

    // Informaci√≥n adicional del afiliado
    console.log('üìä Procesando informaci√≥n adicional del afiliado...');
    
    // Usar datos del dashboard si est√°n disponibles, sino usar datos b√°sicos
    const afiliadoData = dashboardData?.afiliado ?? {};
    
    // Frontal asignado
    const frontal = afiliadoData.frontal !== undefined && afiliadoData.frontal !== null ? (afiliadoData.frontal ? 'S√≠' : 'No') : 'N/A';
    updateElement('frontalAsignado', frontal);
    
    // Patrocinador
    const patrocinador = afiliadoData.nombre_patrocinador ?? 'Sin patrocinador';
    updateElement('nombrePatrocinador', patrocinador);

    // Enlace de afiliado
    const enlaceElement = document.getElementById('enlaceAfiliado');
    console.log('üìù Elemento enlaceAfiliado encontrado:', enlaceElement ? 'S√≠' : 'No');
    if (enlaceElement) {
        let enlace = afiliadoData.enlace_afiliado;
        
        // Si no hay enlace en los datos del dashboard, generarlo con el c√≥digo de afiliado (ruta relativa)
        if (!enlace && afiliadoId && afiliadoId !== 'N/A') {
            const baseUrl = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/'));
            enlace = `${baseUrl}/registro.html?ref=${afiliadoId}`;
        } else if (!enlace) {
            enlace = 'N/A';
        }
        
        enlaceElement.href = enlace;
        enlaceElement.textContent = enlace;
        console.log('‚úÖ Enlace actualizado:', enlace);
    }

    // C√≥digo QR
    const qrElement = document.getElementById('codigoQR');
    console.log('üìù Elemento codigoQR encontrado:', qrElement ? 'S√≠' : 'No');
    if (qrElement) {
        let qrUrl = afiliadoData.qr_code;
        
        // Si no hay QR en los datos del dashboard, generarlo con el enlace de afiliado (ruta relativa)
        if (!qrUrl && afiliadoId && afiliadoId !== 'N/A') {
            const baseUrl = window.location.origin + window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/'));
            const enlaceQR = `${baseUrl}/registro.html?ref=${afiliadoId}`;
            qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${encodeURIComponent(enlaceQR)}`;
        }
        
        if (qrUrl && qrUrl !== 'N/A') {
            qrElement.src = qrUrl;
            qrElement.style.display = 'block';
            console.log('‚úÖ QR actualizado con URL:', qrUrl);
        } else {
            qrElement.style.display = 'none';
            console.log('‚ùå QR no disponible');
        }
    }

    console.log('‚úÖ Informaci√≥n del usuario actualizada completamente');
}

function updateDashboardStats() {
    if (!dashboardData) return;
    
    const stats = dashboardData.estadisticas;
    
    // Actualizar estad√≠sticas principales
    updateElement('totalAfiliados', stats.total_afiliados_red || 0);
    updateElement('totalVentas', dashboardData.datos_recientes.ventas?.length || 0);
    updateElement('inicioTotalComisiones', formatCurrency(stats.comisiones.total_ganado || 0));
    updateElement('saldoDisponible', formatCurrency(stats.comisiones.total_ganado - stats.comisiones.comisiones_pagadas || 0));
    
    // Actualizar indicadores de crecimiento (por ahora en 0%)
    updateElement('crecimientoAfiliados', '+0%');
    updateElement('crecimientoVentas', '+0%');
    updateElement('crecimientoComisiones', '+0%');
}

function updateCrecimientoElement(elementId, valor) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    const signo = valor >= 0 ? '+' : '';
    const color = valor >= 0 ? '#10b981' : '#ef4444';
    
    element.textContent = `${signo}${valor}%`;
    element.style.color = color;
}

function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) {
        element.textContent = value;
    }
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('es-CO', {
        style: 'currency',
        currency: 'COP',
        minimumFractionDigits: 0
    }).format(amount);
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('es-CO', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

function showLoading(message = 'Cargando...') {
    // Implementar loading
    console.log('Loading:', message);
}

function hideLoading() {
    // Ocultar loading
    console.log('Loading hidden');
}

function showError(message) {
    // Implementar notificaci√≥n de error
    showAppNotification(message, 'error');
}

function showSuccess(message) {
    // Implementar notificaci√≥n de √©xito
    showAppNotification(message, 'success');
}

function showAppNotification(message, type = 'success') {
    const container = document.getElementById('notification-container') || document.createElement('div');
    if (!document.getElementById('notification-container')) {
        container.id = 'notification-container';
        container.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; display: flex; flex-direction: column; gap: 10px;';
        document.body.appendChild(container);
    }

    const notification = document.createElement('div');
    notification.className = `app-notification ${type}`;
    notification.textContent = message;

    notification.style.cssText = `
        background-color: ${type === 'success' ? '#28a745' : '#dc3545'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
        font-size: 0.9rem;
    `;

    container.appendChild(notification);

    setTimeout(() => {
        notification.style.opacity = '1';
        notification.style.transform = 'translateX(0)';
    }, 10);

    setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 400);
    }, 4000);
}

function startAutoRefresh() {
    // Actualizar notificaciones cada 30 segundos
    setInterval(() => {
        if (document.querySelector('#notificaciones.active')) {
            loadNotificacionesTab();
        }
    }, 30000);
}

// ========================================
// FUNCIONES DE UTILIDAD ORIGINALES
// ========================================

function copiarEnlace(elementId) {
    console.log('üìã Intentando copiar enlace del elemento:', elementId);
    
    const element = document.getElementById(elementId);
    if (!element) {
        console.error('‚ùå Elemento no encontrado:', elementId);
        showError('Elemento no encontrado');
        return;
    }
    
    // Si es un enlace (a), copiar el href
    if (element.tagName === 'A') {
        const enlace = element.href;
        console.log('üìã Copiando enlace:', enlace);
        
        // Usar la API moderna de clipboard si est√° disponible
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(enlace).then(() => {
                showSuccess('Enlace copiado al portapapeles');
                console.log('‚úÖ Enlace copiado exitosamente');
            }).catch(err => {
                console.error('‚ùå Error copiando con clipboard API:', err);
                // Fallback al m√©todo antiguo
                fallbackCopyTextToClipboard(enlace);
            });
        } else {
            // Fallback para navegadores antiguos
            fallbackCopyTextToClipboard(enlace);
        }
    } else {
        // Si es un input, usar el m√©todo tradicional
        element.select();
        element.setSelectionRange(0, 99999); // Para m√≥viles
        try {
            document.execCommand('copy');
            showSuccess('Enlace copiado al portapapeles');
            console.log('‚úÖ Enlace copiado exitosamente');
        } catch (err) {
            console.error('‚ùå Error copiando:', err);
            showError('Error al copiar el enlace');
        }
    }
}

function copiarEnlaceInput(button) {
    const input = button.previousElementSibling;
    input.select();
    input.setSelectionRange(0, 99999); // Para dispositivos m√≥viles
    navigator.clipboard.writeText(input.value).then(() => {
        const originalText = button.textContent;
        button.textContent = '¬°Copiado!';
        button.style.backgroundColor = '#28a745';
        setTimeout(() => {
            button.textContent = originalText;
            button.style.backgroundColor = ''; // Vuelve al color original
        }, 2000);
    }).catch(err => {
        console.error('Error al copiar enlace del input:', err);
        showError('No se pudo copiar el enlace');
    });
}

function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showSuccess('Enlace copiado al portapapeles');
        console.log('‚úÖ Enlace copiado exitosamente (fallback)');
    } catch (err) {
        console.error('‚ùå Error copiando con fallback:', err);
        showError('Error al copiar el enlace');
    }
    
    document.body.removeChild(textArea);
}

function logout() {
    console.log('üö™ Cerrando sesi√≥n...');
    
    // Limpiar localStorage
    localStorage.removeItem('session_token');
    localStorage.removeItem('user_data');
    localStorage.removeItem('dashboard_data');
    localStorage.removeItem('afiliado_data');
    localStorage.removeItem('afiliado_token');
    // Limpiar todo localStorage si es seguro:
    // localStorage.clear(); // (opcional, si solo se usa para sesi√≥n)

    // Limpiar sessionStorage
    sessionStorage.removeItem('current_user_id');
    sessionStorage.removeItem('afiliado_id');
    sessionStorage.removeItem('afiliado_token');
    // sessionStorage.clear(); // (opcional, si solo se usa para sesi√≥n)

    // Limpiar variables globales
    userData = null;
    dashboardData = null;
    analyticsData = null;
    notificacionesData = null;
    campanasData = null;
    charts = {};

    // Hacer logout en el servidor
    fetch('api/auth/logout.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }).catch(error => {
        console.log('Error en logout del servidor:', error);
    }).finally(() => {
        // Redirigir al login con par√°metro para forzar limpieza
        window.location.href = 'login.html?logout=true';
    });
}

function solicitarRetiro() {
    // Implementaci√≥n original de solicitud de retiro
}

function comprarLibro(libroId) {
    console.log('üõí Comprando libro ID:', libroId);
    // Redirigir a la p√°gina de pago con el libro seleccionado
    window.location.href = `pago.html?libro=${libroId}`;
}

function descargarQR() {
    console.log('üì• Intentando descargar c√≥digo QR...');
    
    const qrImage = document.getElementById('codigoQR');
    if (!qrImage) {
        console.error('‚ùå Elemento QR no encontrado');
        showError('C√≥digo QR no encontrado');
        return;
    }
    
    if (!qrImage.src || qrImage.src === '' || qrImage.style.display === 'none') {
        console.error('‚ùå C√≥digo QR no disponible');
        showError('C√≥digo QR no disponible');
        return;
    }
    
    console.log('üì• Descargando QR desde:', qrImage.src);
    
    // Convertir la imagen a blob para descarga
    fetch(qrImage.src)
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al obtener la imagen QR');
            }
            return response.blob();
        })
        .then(blob => {
            // Crear URL del blob
            const blobUrl = window.URL.createObjectURL(blob);
            
            // Crear enlace de descarga
            const link = document.createElement('a');
            link.href = blobUrl;
            link.download = `qr-afiliado-${userData?.codigo_afiliado || 'user'}.png`;
            link.style.display = 'none';
            
            // Agregar al DOM y hacer clic
            document.body.appendChild(link);
            link.click();
            
            // Limpiar
            document.body.removeChild(link);
            window.URL.revokeObjectURL(blobUrl);
            
            showSuccess('C√≥digo QR descargado exitosamente');
            console.log('‚úÖ C√≥digo QR descargado exitosamente');
        })
        .catch(error => {
            console.error('‚ùå Error descargando QR:', error);
            showError('Error al descargar el c√≥digo QR');
        });
}

// ========================================
// EXPORTAR FUNCIONES PARA USO GLOBAL
// ========================================

// Funci√≥n de prueba para verificar que las funciones est√°n disponibles
function testFunciones() {
    console.log('üß™ Probando funciones...');
    console.log('üìã copiarEnlace disponible:', typeof window.copiarEnlace);
    console.log('üì• descargarQR disponible:', typeof window.descargarQR);
    console.log('üö™ logout disponible:', typeof window.logout);
}

// Ejecutar test al cargar
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(testFunciones, 1000);
});

window.loadAnalyticsTab = loadAnalyticsTab;
window.showModalCampana = showModalCampana;
window.hideModalCampana = hideModalCampana;
window.editarCampana = showModalCampana;
window.eliminarCampana = eliminarCampana;
window.irATienda = irATienda;
window.cerrarAlerta = cerrarAlerta;
// Exportar funciones globalmente
window.copiarEnlace = copiarEnlace;
window.descargarQR = descargarQR;
window.mostrarModalLibro = mostrarModalLibro;
window.comprarLibro = comprarLibro;
window.logout = logout;
window.fallbackCopyTextToClipboard = fallbackCopyTextToClipboard;

console.log('üåê Funciones exportadas globalmente:');
console.log('  - copiarEnlace:', typeof window.copiarEnlace);
console.log('  - descargarQR:', typeof window.descargarQR);
console.log('  - logout:', typeof window.logout);
